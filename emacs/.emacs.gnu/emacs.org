#+title: emacs configs

* Init
#+begin_src emacs-lisp :tangle init.el

  (add-to-list 'load-path  (expand-file-name "cfg/" user-emacs-directory))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq make-backup-files nil)

  (require 'straight)

  (require 'keys)
  (require 'completion)
  (require 'style)
  (require 'dev)
  (require 'prod)
  (require 'auto-insert)
  (require 'dashboard)

#+end_src

* Straight Package Manager and Use-Package Support
#+begin_src emacs-lisp :tangle cfg/straight.el

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (provide 'straight)

#+end_src

* The Evil Way and General
#+begin_src emacs-lisp :tangle cfg/keys.el

  (use-package general)
  (use-package evil
    :straight evil-nerd-commenter t
    :init
    (evil-mode)
    :general
    (:states 'normal
             "/" 'consult-line
             "<SPC>;" 'evilnc-comment-or-uncomment-lines))

  (use-package which-key :init (which-key-mode))

  (use-package hydra)

  (defhydra hydra-buffer-menu (:color purple
                               :hint nil)
  "
  ^Change Buffer Size^            
  ^^^^^^^^------
  _-_: shrink buffer horizontally
  _+_: enlarge buffer horizontally   
  _i_: enlarge buffer
  _d_: shrink buffer
  
  "
  ("+" enlarge-window-horizontally)
  ("-" shrink-window-horizontally)
  ("i" enlarge-window)
  ("d" shrink-window)
  ("c" nil "cancel")
  ("q" quit-window "quit" :color blue))

  (defhydra hydra-zoom (:color green
                        :hint nil)
  "
   ^zoom
   ^----
   _i_: increase text size
   _d_: decrease text size
  "
  ("i" text-scale-increase)
  ("d" text-scale-decrease ))

  ;;some main bindings
  (general-define-key
   "<escape>" 'keyboard-escape-quit)

  (provide 'keys)

#+end_src

* Completion Systems and Complementary Packages
#+begin_src emacs-lisp :tangle cfg/completion.el

   (use-package vertico
   :straight
   consult
   marginalia
   savehist orderless
   all-the-icons-completion
   embark
   embark-consult
   t

   :init
   (vertico-mode)
   (savehist-mode)
   (marginalia-mode)
   (all-the-icons-completion-mode)

   :custom
   (completion-styles '(orderless))
   (completion-category-defaults nil)
   (completion-category-overrides '((file (styles partial-completion))))
   :general

  (:states 'normal
           :prefix "<SPC>"
           "<SPC>" 'execute-extended-command
           "." 'find-file

           "<" 'consult-buffer
           "b" 'consult-bookmark
           "r" 'consult-recent-file)

  (:states 'normal "/" 'consult-line)

  ("C-." 'embark-act)
  (:keymaps 'vertico-map
   "<DEL>" 'vertico-directory-delete-char))
  
  (add-to-list 'load-path (expand-file-name "straight/repos/vertico/extensions" user-emacs-directory))
  (require 'vertico-directory)

  (use-package company
  :straight company-box t

  :custom
  (global-company-mode 1)
  (company-minimum-prefix-length 1)
  (company-selection-wrap-around t)

  :ghook
  ('company-mode-hook #'company-box-mode))

  (provide 'completion)

#+end_src

* Just Style
#+begin_src emacs-lisp :tangle cfg/style.el

  (setq default-frame-alist '((vertical-scroll-bars . nil)
                              (font . "JetBrains Mono Nerd Font-12")))

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)

  (use-package page-break-lines :custom (global-page-break-lines-mode t))

  (use-package doom-themes :init (load-theme 'doom-dracula t))
  (use-package doom-modeline :init (doom-modeline-mode))

  (use-package anzu :init (global-anzu-mode))
  (use-package evil-anzu :requires (anzu))

  (use-package rainbow-delimiters :ghook 'prog-mode-hook)
  (use-package rainbow-mode :ghook 'prog-mode-hook)

  (use-package sublimity)
  (require 'sublimity-scroll)

  (use-package format-all
    :gfhook ('prog-mode-hook (list #'format-all-mode #'format-all-ensure-formatter))
    :custom (format-all-formatters t))

  (provide 'style)

#+end_src

* Programming Related Packages
#+begin_src emacs-lisp :tangle cfg/dev.el

  (use-package ein)

  (use-package lsp-mode
   :ghook ('prog-mode-hook #'lsp)
   :straight lsp-haskell t)

  (use-package dap-mode
  :config
  (dap-mode t)
  (dap-ui-mode t)
  (dap-tooltip-mode t)
  (tooltip-mode t)
  (dap-ui-controls-mode t)
  (require 'dap-gdb-lldb))

  (use-package haskell-mode
   :ghook
   ('haskell-mode-hook #'lsp)
   ('haskell-literate-mode-hook #'lsp))

  (use-package vterm
   :general
   (:states 'normal
            :keymaps 'vterm-mode-map
            "p" 'vterm-yank)
   (:states 'normal
             "<SPC>," 'vterm-other-window))

  (use-package magit
    :straight forge t
    :general
    (:states 'normal
             :prefix "<SPC>m"
             "m" 'magit
             "c" 'magit-commit
             "C" 'magit-clone
             "s" 'magit-stage
             "u" 'magit-unstage
             "p" 'magit-push
             "P" 'magit-pull
             "r" 'magit-reset
             ))

  (use-package docker)

  (use-package adaptive-wrap :init (adaptive-wrap-prefix-mode))

  (provide 'dev)

#+end_src

* Productivity and Organization Related Packages
#+begin_src emacs-lisp :tangle cfg/prod.el


    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :config
      (require 'org-protocol)
      (setq org-roam-directory (file-truename "~/org/roam")
            org-roam-db-autosync-mode t
            org-roam-protocol-store-links "~/org/roam")
      :general
      (:states 'normal
               "<SPC>ni" 'org-roam-node-insert))

      (use-package org-roam-ui
        :straight
        (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
        :after org-roam
        :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start t))

    (use-package org-bullets :ghook 'org-mode-hook)

    (use-package org
      :gfhook
      ('org-mode-hook (list #'org-indent-mode #'variable-pitch-mode #'visual-line-mode))
      :custom
      (org-agenda-files '("~/org/master.org"))
      (org-hide-emphasis-markers t))
    (let* ((variable-tuple
          (cond ((x-list-fonts "SourceSansPro")         '(:font "SourceSansPro"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     '(variable-pitch ((t (:family "et-book" :height 130))))
     '(fixed-pitch ((t ( :family "Fira Code Nerd Font" :height 110))))
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))


    (use-package pass
      :straight password-store t
      :general
      (:states 'normal
               :prefix "<SPC>p"
               "p" 'pass
               "i" 'password-store-insert
               "r" 'password-store-rename
               "d" 'password-store-remove
               "g" 'password-store-generate))

    (use-package perspective
      :init
      (persp-mode)
      :general
      (:states 'normal
               :prefix "<SPC>w"
               "s" 'persp-switch
               "d" 'persp-kill
               "r" 'persp-rename))

    (use-package projectile
      :straight ag rg t
      :custom
      (projectile-mode 1))


    (provide 'prod)

#+end_src

* Snippets Using Yasnippet and Auto-Insert Mode
#+begin_src emacs-lisp :tangle cfg/auto-insert.el

  (setq auto-insert-directory "~/.emacs.d/cfg/snippets")

  (use-package yasnippet
    :init
    (yas-global-mode)
    :custom
    (setq yas-snippet-dirs '("~/.emacs.d/cfg/snippets")))

  (auto-insert-mode)
  (setq auto-insert-query nil)

  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas/expand-snippet (buffer-string) (point-min) (point-max)))

  (setq auto-insert-alist '(
                            (("\\.c\\'" . "c template") . ["c-mode/__c" autoinsert-yas-expand])
                            ))

  (provide 'auto-insert)

#+end_src

* Dashboard Using... Dashboard
#+begin_src emacs-lisp :tangle cfg/dashboard.el

  (use-package all-the-icons)
  (use-package dashboard
    :init
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
      `(;; line1
        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
         "Homepage"
         "Browse homepage"
         (lambda (&rest _) (browse-url "homepage")))
        ("â˜…" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
        ("?" "" "?/h" #'show-help nil "<" ">"))
         ;; line 2
        ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
          "Linkedin"
          ""
          (lambda (&rest _) (browse-url "homepage")))
         ("âš‘" nil "Show flags" (lambda (&rest _) (message "flag")) error))))

    (initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

  (provide 'dashboard)

#+end_src
